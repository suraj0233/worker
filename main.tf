provider "aws" {
  region = var.aws_region
}

resource "aws_security_group" "spacelift_worker_sg1" {
  name        = "spacelift_worker_sg1"
  description = "Allow SSH and outbound HTTPS traffic"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # For production, restrict SSH to your IP.
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "spacelift_worker" {
  ami           = var.ami_id         # Use an appropriate Ubuntu AMI ID for your region.
  instance_type = var.instance_type    # e.g., "t3.small"
  key_name      = var.aws_key_name
  security_groups = [aws_security_group.spacelift_worker_sg1.name]

  user_data = <<-EOF
    #!/bin/bash
    set -e

    # Update and install required packages
    sudo apt-get update -y
    sudo apt-get install -y docker.io curl unzip openssl

    # Start and enable Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    sudo usermod -aG docker ubuntu

    # Create worker key and certificate files from provided variables
    cat <<'EOKEY' | sudo tee /root/worker.key
    ${var.worker_key}
    EOKEY

    cat <<'EOCERT' | sudo tee /root/worker.crt
    ${var.worker_crt}
    EOCERT

    # Base64 encode the private key (required by the launcher)
    sudo bash -c "cat /root/worker.key | base64 -w 0 > /root/worker_key_encoded.txt"

    # Download the Spacelift Launcher binary
    curl -Lo /root/spacelift-launcher https://downloads.spacelift.io/spacelift-launcher-x86_64
    chmod +x /root/spacelift-launcher

    # Export necessary environment variables for the launcher
    export SPACELIFT_TOKEN="${var.spacelift_token}"
    export SPACELIFT_POOL_PRIVATE_KEY=$(cat /root/worker_key_encoded.txt)
    export SPACELIFT_WORKER_POOL_CERT="/root/worker.crt"
    export SPACELIFT_WORKER_POOL_KEY="/root/worker.key"

    # Optionally, run a Docker container for the Spacelift runner if needed.
    # Uncomment the following block if you want to run the runner container:
     docker run -d \
       -e SPACELIFT_WORKER_POOL_CERT=/root/worker.crt \
       -e SPACELIFT_WORKER_POOL_KEY=/root/worker.key \
       -v /root/worker.crt:/etc/spacelift/worker.crt \
       -v /root/worker.key:/etc/spacelift/worker.key \
       spacelift/runner:latest

    # Finally, run the Spacelift Launcher
    /root/spacelift-launcher

  EOF

  tags = {
    Name = "Spacelift-Worker1"
  }
}

variable "aws_region" {
  description = "AWS region to deploy the instance"
  type        = string
  default     = "ap-south-1"
}

variable "instance_type" {
  description = "EC2 instance type for the worker"
  type        = string
  default     = "t3.small"
}

variable "aws_key_name" {
  description = "AWS key pair name to allow SSH access"
  type        = string
}

# AMI ID for Ubuntu (update to a current Ubuntu AMI in your region)
variable "ami_id" {
  description = "AMI ID for the EC2 instance"
  type        = string
}

# The signed certificate obtained from Spacelift after uploading the CSR.
variable "worker_crt" {
  description = "Signed certificate (worker.crt) from Spacelift"
  type        = string
  sensitive   = true
}

# The private key generated by the openssl command (worker.key)
variable "worker_key" {
  description = "Private key (worker.key) generated locally"
  type        = string
  sensitive   = true
}

# The Spacelift token obtained after creating the worker pool.
variable "spacelift_token" {
  description = "Spacelift token for the worker pool"
  type        = string
  sensitive   = true
}

output "worker_instance_public_ip" {
  description = "Public IP of the Spacelift worker EC2 instance"
  value       = aws_instance.spacelift_worker.public_ip
}
